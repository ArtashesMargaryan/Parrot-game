import { CellAlign, CellScale, ICellConfig } from './Types';
import { Point } from './utils/geom/Point';
import { Rect } from './utils/geom/Rect';
export declare class Cell<T> {
    static readonly minSize: number;
    private readonly _config;
    private readonly _name;
    private readonly _cells;
    private readonly _bounds;
    private readonly _scale;
    private readonly _align;
    private readonly _padding;
    private readonly _offset;
    private readonly _contents;
    /**
     * @param config Input configuration object.
     */
    constructor(config: ICellConfig);
    /**
     * @description Configuration object reference passed in constructor
     * @returns {ICellConfig} configuration object
     */
    get config(): ICellConfig;
    /**
     * @description Cell name defined in configuration object
     * @returns {string} cell name
     */
    get name(): string;
    /**
     * @description Array of child cells
     * @returns {Cell[]} child cells
     */
    get cells(): Cell<T>[];
    /**
     * @description Bounds area in pixels
     * @returns {Rect} bounds area
     */
    get bounds(): Rect;
    /**
     * @description Padding area in pixels
     * @returns {Rect} padding area
     */
    get padding(): Rect;
    /**
     * @description Scale type, used to scale contents
     * @returns {CellScale} scale type
     */
    get scale(): CellScale;
    /**
     * @description Align type, used to align contents
     * @returns {CellAlign} align type
     */
    get align(): CellAlign;
    /**
     * @description Contents
     * @returns {T[]} cell contents
     */
    get contents(): T[];
    /**
     * @description Cell bounds considered paddings
     * @returns {Rect} Rectangle considered paddings
     */
    get area(): Rect;
    /**
     * @description Cell offset
     * @returns {Point} cell offset
     */
    get offset(): Point;
    /**
     * @description Returns cells way down of the tree, recursively
     * @returns {Cell[]} Array of cells
     */
    getCells(): Cell<T>[];
    /**
     * @description Returns cell based on given name
     * @param name The name of the cell
     * @returns {Cell | undefined}
     */
    getCellByName(name: string): Cell<T> | undefined;
    getCellByContent(content: T): Cell<T> | undefined;
    private _getName;
    private _getScale;
    private _getAlign;
    private _getOffset;
    private _getContents;
    private _getCells;
    private _getBounds;
    private _getPadding;
    private _buildPadding;
    private _buildCells;
}
