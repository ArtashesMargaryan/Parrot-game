import { Cell, ICellConfig } from '@armathai/grid-core';
import { IContent, IPixiChild, IPixiGrid } from './Types';
export declare abstract class PixiGrid extends PIXI.Container implements IPixiGrid {
    grid: Cell<IContent>;
    private _debug;
    constructor();
    /**
     * @description Rebuilds Grid. Destroys existing grid and creates new one based on given or existing configuration
     * @param config Input configuration object. Can be empty, to build with existing configuration
     * @returns {void}
     */
    rebuild(config?: ICellConfig): void;
    protected getCellByName(name: string): Cell<IContent>;
    protected getCellByContent(content: IContent): Cell<IContent> | undefined;
    /**
     * @description Adds the given Game Object, to this Container.
     * @param cellName Cell name which will hold given child as content
     * @param child The Game Object, to add to the Container.
     * @param config Configuration object, which will be merged with cell configuration
     * @returns {this}
     */
    protected setChild(cellName: string, child: IPixiChild): this;
    protected rebuildChild(child: IPixiChild, cellName?: string): this;
    protected addContent(child: IPixiChild, cell: Cell<IContent>): void;
    protected removeContent(child: IPixiChild): void;
    private _patchChildDestroy;
    /**
     * @description Creates Grid object based on input configuration object
     * @param config Input configuration object.
     * @returns {void}
     */
    private _internalBuild;
    private _rebuildContent;
    private _adjustContent;
    private _adjustGridChild;
    private _adjustChild;
    private _scaleContent;
    private _positionContent;
    private _resetContent;
    abstract getGridConfig(): ICellConfig;
}
