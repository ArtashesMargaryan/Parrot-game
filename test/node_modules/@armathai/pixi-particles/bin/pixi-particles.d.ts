/// <reference types="pixi.js" />
declare module PIXI.particles.core {
    class Particle {
        life: number;
        currentLife: number;
        xScale: number;
        xScaleDiff: number;
        yScale: number;
        yScaleDiff: number;
        rotation: number;
        rotationDiff: number;
        velocity: number;
        velocityDiff: number;
        angle: number;
        angleDiff: number;
        angleCos: number;
        angleSin: number;
        transparency: number;
        transparencyDiff: number;
        wind: number;
        windDiff: number;
        gravity: number;
        gravityDiff: number;
        tint: number[];
        color: number[];
        frame: number;
        position: PIXI.Point;
        positionOffset: PIXI.Point;
        flip: {
            x: boolean;
            y: boolean;
        };
        scale: PIXI.Point;
        texture: PIXI.Texture;
        private _sprite;
        constructor(additive: boolean, texture?: PIXI.Texture);
        get sprite(): PIXI.Sprite;
        reset(): void;
        update(): void;
    }
}
declare module PIXI.particles.core {
    class ParticleEffect extends PIXI.Container {
        private readonly _emitters;
        constructor(config: ParticleEffectConfig);
        start(): void;
        reset(): void;
        update(delta: number): void;
        allowCompletion(): void;
        isComplete(): boolean;
        setDuration(duration: number): void;
        getEmitters(): ParticleEmitter[];
        findEmitter(name: string): ParticleEmitter;
        preAllocateParticles(): void;
        destroy(options?: {
            children?: boolean;
            texture?: boolean;
            baseTexture?: boolean;
        }): void;
        protected newEmitter(name: string, emitterConfig: ParticleEmitterConfig): ParticleEmitter;
    }
}
declare module PIXI.particles.core {
    type ParticleEffectConfig = {
        [key: string]: ParticleEmitterConfig;
    };
}
declare module PIXI.particles.core {
    class ParticleEmitter {
        duration: number;
        durationTimer: number;
        sprites: PIXI.Texture[];
        continuous: boolean;
        name: string;
        private _delayValue;
        private _lifeOffsetValue;
        private _durationValue;
        private _lifeValue;
        private _emissionValue;
        private _xScaleValue;
        private _yScaleValue;
        private _rotationValue;
        private _velocityValue;
        private _angleValue;
        private _windValue;
        private _gravityValue;
        private _transparencyValue;
        private _tintValue;
        private _xOffsetValue;
        private _yOffsetValue;
        private _spawnWidthValue;
        private _spawnHeightValue;
        private _spawnShapeValue;
        private _xSizeValues;
        private _ySizeValues;
        private _motionValues;
        private _accumulator;
        private _spriteMode;
        private _particles;
        private _minParticleCount;
        private _maxParticleCount;
        private _x;
        private _y;
        private _container;
        private _activeCount;
        private _active;
        private _firstUpdate;
        private _flipX;
        private _flipY;
        private _updateFlags;
        private _allowCompletion;
        private _emission;
        private _emissionDiff;
        private _emissionDelta;
        private _lifeOffset;
        private _lifeOffsetDiff;
        private _life;
        private _lifeDiff;
        private _spawnWidth;
        private _spawnWidthDiff;
        private _spawnHeight;
        private _spawnHeightDiff;
        private _delay;
        private _delayTimer;
        private _attached;
        private _aligned;
        private _additive;
        constructor(container: PIXI.Container, name: string, emitterConfig: ParticleEmitterConfig);
        update(delta: number): void;
        setTextures(sprites: PIXI.Texture[]): void;
        setSpriteMode(spriteMode: constants.SpriteMode): void;
        preAllocateParticles(): void;
        allowCompletion(): void;
        start(): void;
        reset(): void;
        isComplete(): boolean;
        getPercentComplete(): number;
        private _newParticle;
        private _setMaxParticleCount;
        private _setMinParticleCount;
        private _addParticle;
        private _addParticles;
        private _restart;
        private _initialize;
        private _activateParticle;
        private _deactivateParticle;
        private _updateParticle;
        private _generateLifeValues;
        private _generateLifeOffsetValues;
    }
}
declare module PIXI.particles.core {
    type ParticleEmitterConfig = {
        delay: values.RangedNumericValueType;
        duration: values.RangedNumericValueType;
        count: {
            min: number;
            max: number;
        };
        emission: values.ScaledNumericValueType;
        life: values.IndependentScaledNumericValueType & {
            offset: values.IndependentScaledNumericValueType;
        };
        offset: {
            x: values.ScaledNumericValueType;
            y: values.ScaledNumericValueType;
        };
        spawn: values.SpawnShapeValueType & {
            width: values.ScaledNumericValueType;
            height: values.ScaledNumericValueType;
        };
        scale: {
            x: values.ScaledNumericValueType;
            y: values.ScaledNumericValueType;
        };
        velocity: values.ScaledNumericValueType;
        angle: values.ScaledNumericValueType;
        rotation: values.ScaledNumericValueType;
        wind: values.ScaledNumericValueType;
        gravity: values.ScaledNumericValueType;
        tint: values.GradientColorValueType;
        transparency: values.ScaledNumericValueType;
        options: {
            attached: boolean;
            continuous: boolean;
            aligned: boolean;
            additive: boolean;
            behind: boolean;
            premultipliedAlpha: boolean;
            spriteMode: constants.SpriteMode;
        };
        textures: string[];
    };
}
declare module PIXI.particles {
}
declare module PIXI.particles.constants {
    enum SpawnEllipseSide {
        both = 0,
        top = 1,
        bottom = 2
    }
}
declare module PIXI.particles.constants {
    enum SpawnShape {
        point = 0,
        line = 1,
        square = 2,
        ellipse = 3
    }
}
declare module PIXI.particles.constants {
    enum SpriteMode {
        single = 0,
        random = 1,
        animated = 2
    }
}
declare module PIXI.particles.utils {
    const between: (min: number, max: number) => number;
}
declare module PIXI.particles.utils {
    const isNullOrUndefined: <T>(obj: T) => obj is null;
}
declare module PIXI.particles.utils {
    const sample: <T>(array: T[]) => T;
}
declare module PIXI.particles.values {
    type ValueType = {
        active?: boolean;
        alwaysActive?: boolean;
    };
    class Value {
        active: boolean;
        alwaysActive: boolean;
        init(value: ValueType): void;
    }
}
declare module PIXI.particles.values {
    type GradientColorValueType = ValueType & {
        colorsCount: number;
        timelineCount: number;
    };
    class GradientColorValue extends Value {
        private static _temp;
        colors: number[];
        timeline: number[];
        constructor();
        getColor(percent: number): number[];
        init(value: GradientColorValueType): void;
    }
}
declare module PIXI.particles.values {
    type RangedNumericValueType = ValueType & {
        lowMin?: number;
        lowMax?: number;
    };
    class RangedNumericValue extends Value {
        lowMin: number;
        lowMax: number;
        get newLowValue(): number;
        setLow(min: number, max?: number): void;
        scale(scale: number): void;
        init(value: RangedNumericValueType): void;
    }
}
declare module PIXI.particles.values {
    type ScaledNumericValueType = RangedNumericValueType & {
        highMin?: number;
        highMax?: number;
        relative?: boolean;
        scalingCount?: number;
        timelineCount?: number;
    };
    class ScaledNumericValue extends RangedNumericValue {
        scaling: number[];
        timeline: number[];
        highMin: number;
        highMax: number;
        relative: boolean;
        get newHighValue(): number;
        setHigh(min: number, max?: number): void;
        scale(scale: number): void;
        getScaling(): number[];
        getScale(percent: number): number;
        init(value: ScaledNumericValueType): void;
    }
}
declare module PIXI.particles.values {
    type IndependentScaledNumericValueType = ScaledNumericValueType & {
        independent: boolean;
    };
    class IndependentScaledNumericValue extends ScaledNumericValue {
        independent: boolean;
        init(value: IndependentScaledNumericValueType): void;
    }
}
declare module PIXI.particles.values {
    type SpawnShapeValueType = ValueType & {
        shape: constants.SpawnShape;
        edges?: boolean;
        side?: constants.SpawnEllipseSide;
    };
    class SpawnShapeValue extends Value {
        shape: constants.SpawnShape;
        edges: boolean;
        side: constants.SpawnEllipseSide;
        init(value: SpawnShapeValueType): void;
    }
}
