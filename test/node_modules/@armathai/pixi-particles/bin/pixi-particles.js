var pixiparticles;
(function (pixiparticles) {
    var core;
    (function (core) {
        var Particle = (function () {
            function Particle(additive, texture) {
                this.rotation = 0;
                this.position = new PIXI.Point(0, 0);
                this.positionOffset = new PIXI.Point(0, 0);
                this.scale = new PIXI.Point(0, 0);
                this._sprite = new PIXI.Sprite(texture);
                this._sprite.anchor.set(0.5);
                this._sprite.blendMode = additive ? PIXI.BLEND_MODES.ADD : PIXI.BLEND_MODES.NORMAL;
            }
            Object.defineProperty(Particle.prototype, "sprite", {
                get: function () {
                    return this._sprite;
                },
                enumerable: false,
                configurable: true
            });
            Particle.prototype.reset = function () {
                this.position.set(0, 0);
                this.scale.set(1, 1);
                this.texture = null;
            };
            Particle.prototype.update = function () {
                this._sprite.texture = this.texture;
                this._sprite.tint = PIXI.utils.rgb2hex(this.color);
                this._sprite.alpha = this.color[3];
                this.scale.copyTo(this._sprite.scale);
                this._sprite.position.x = this.position.x + this.positionOffset.x;
                this._sprite.position.y = this.position.y + this.positionOffset.y;
                this._sprite.angle = this.rotation;
            };
            return Particle;
        }());
        core.Particle = Particle;
    })(core = pixiparticles.core || (pixiparticles.core = {}));
})(pixiparticles || (pixiparticles = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var pixiparticles;
(function (pixiparticles) {
    var core;
    (function (core) {
        var ParticleEffect = (function (_super) {
            __extends(ParticleEffect, _super);
            function ParticleEffect(config) {
                var _this = _super.call(this) || this;
                _this._emitters = [];
                Object.keys(config).forEach(function (e) {
                    var emitter = _this.newEmitter(e, config[e]);
                    _this._emitters.push(emitter);
                });
                return _this;
            }
            ParticleEffect.prototype.start = function () {
                this._emitters.forEach(function (e) { return e.start(); });
            };
            ParticleEffect.prototype.reset = function () {
                this._emitters.forEach(function (e) { return e.reset(); });
            };
            ParticleEffect.prototype.update = function (delta) {
                this._emitters.forEach(function (e) { return e.update(delta); });
            };
            ParticleEffect.prototype.allowCompletion = function () {
                this._emitters.forEach(function (e) { return e.allowCompletion(); });
            };
            ParticleEffect.prototype.isComplete = function () {
                return !this._emitters.find(function (e) { return !e.isComplete(); });
            };
            ParticleEffect.prototype.setDuration = function (duration) {
                this._emitters.forEach(function (e) {
                    e.continuous = false;
                    e.duration = duration;
                    e.durationTimer = 0;
                });
            };
            ParticleEffect.prototype.getEmitters = function () {
                return this._emitters;
            };
            ParticleEffect.prototype.findEmitter = function (name) {
                return this._emitters.find(function (e) { return e.name === name; });
            };
            ParticleEffect.prototype.preAllocateParticles = function () {
                this._emitters.forEach(function (e) { return e.preAllocateParticles(); });
            };
            ParticleEffect.prototype.destroy = function (options) {
                if (options === void 0) { options = { children: true }; }
                _super.prototype.destroy.call(this, options);
            };
            ParticleEffect.prototype.newEmitter = function (name, emitterConfig) {
                return new core.ParticleEmitter(this, name, emitterConfig);
            };
            return ParticleEffect;
        }(PIXI.Container));
        core.ParticleEffect = ParticleEffect;
    })(core = pixiparticles.core || (pixiparticles.core = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var core;
    (function (core) {
        var UpdateFlags;
        (function (UpdateFlags) {
            UpdateFlags[UpdateFlags["scale"] = 1] = "scale";
            UpdateFlags[UpdateFlags["angle"] = 2] = "angle";
            UpdateFlags[UpdateFlags["rotation"] = 4] = "rotation";
            UpdateFlags[UpdateFlags["velocity"] = 8] = "velocity";
            UpdateFlags[UpdateFlags["wind"] = 16] = "wind";
            UpdateFlags[UpdateFlags["gravity"] = 32] = "gravity";
            UpdateFlags[UpdateFlags["tint"] = 64] = "tint";
            UpdateFlags[UpdateFlags["sprite"] = 128] = "sprite";
        })(UpdateFlags || (UpdateFlags = {}));
        var ParticleEmitter = (function () {
            function ParticleEmitter(container, name, emitterConfig) {
                this.duration = 1;
                this.durationTimer = 0;
                this.continuous = false;
                this._delayValue = new pixiparticles.values.RangedNumericValue();
                this._lifeOffsetValue = new pixiparticles.values.IndependentScaledNumericValue();
                this._durationValue = new pixiparticles.values.RangedNumericValue();
                this._lifeValue = new pixiparticles.values.IndependentScaledNumericValue();
                this._emissionValue = new pixiparticles.values.ScaledNumericValue();
                this._xScaleValue = new pixiparticles.values.ScaledNumericValue();
                this._yScaleValue = new pixiparticles.values.ScaledNumericValue();
                this._rotationValue = new pixiparticles.values.ScaledNumericValue();
                this._velocityValue = new pixiparticles.values.ScaledNumericValue();
                this._angleValue = new pixiparticles.values.ScaledNumericValue();
                this._windValue = new pixiparticles.values.ScaledNumericValue();
                this._gravityValue = new pixiparticles.values.ScaledNumericValue();
                this._transparencyValue = new pixiparticles.values.ScaledNumericValue();
                this._tintValue = new pixiparticles.values.GradientColorValue();
                this._xOffsetValue = new pixiparticles.values.ScaledNumericValue();
                this._yOffsetValue = new pixiparticles.values.ScaledNumericValue();
                this._spawnWidthValue = new pixiparticles.values.ScaledNumericValue();
                this._spawnHeightValue = new pixiparticles.values.ScaledNumericValue();
                this._spawnShapeValue = new pixiparticles.values.SpawnShapeValue();
                this._accumulator = 0;
                this._spriteMode = pixiparticles.constants.SpriteMode.single;
                this._minParticleCount = 0;
                this._maxParticleCount = 4;
                this._x = 0;
                this._y = 0;
                this._activeCount = 0;
                this._firstUpdate = false;
                this._flipX = false;
                this._flipY = false;
                this._updateFlags = 0;
                this._allowCompletion = false;
                this._emission = 0;
                this._emissionDiff = 0;
                this._emissionDelta = 0;
                this._lifeOffset = 0;
                this._lifeOffsetDiff = 0;
                this._life = 0;
                this._lifeDiff = 0;
                this._spawnWidth = 0;
                this._spawnWidthDiff = 0;
                this._spawnHeight = 0;
                this._spawnHeightDiff = 0;
                this._delay = 0;
                this._delayTimer = 0;
                this._attached = false;
                this._aligned = false;
                this._additive = true;
                this._initialize();
                this._container = container;
                this.name = name;
                var options = emitterConfig.options;
                this._attached = options.attached;
                this.continuous = options.continuous;
                this._aligned = options.aligned;
                this._additive = options.additive;
                this._spriteMode = options.spriteMode;
                this._delayValue.init(emitterConfig.delay);
                this._durationValue.init(emitterConfig.duration);
                var count = emitterConfig.count;
                this._setMaxParticleCount(count.max);
                this._setMinParticleCount(count.min);
                this._emissionValue.init(emitterConfig.emission);
                this._lifeValue.init(emitterConfig.life);
                this._lifeOffsetValue.init(emitterConfig.life.offset);
                this._xOffsetValue.init(emitterConfig.offset.x);
                this._yOffsetValue.init(emitterConfig.offset.y);
                this._spawnShapeValue.init(emitterConfig.spawn);
                this._spawnWidthValue.init(emitterConfig.spawn.width);
                this._spawnHeightValue.init(emitterConfig.spawn.height);
                this._xScaleValue.init(emitterConfig.scale.x);
                this._yScaleValue.init(emitterConfig.scale.y);
                this._velocityValue.init(emitterConfig.velocity);
                this._angleValue.init(emitterConfig.angle);
                this._rotationValue.init(emitterConfig.rotation);
                this._windValue.init(emitterConfig.wind);
                this._gravityValue.init(emitterConfig.gravity);
                this._tintValue.init(emitterConfig.tint);
                this._transparencyValue.init(emitterConfig.transparency);
                var textures = emitterConfig.textures;
                this.setTextures(textures.map(function (t) { return PIXI.Texture.from(t); }));
            }
            ParticleEmitter.prototype.update = function (delta) {
                this._accumulator += delta;
                if (this._accumulator < 1)
                    return;
                var deltaMillis = this._accumulator;
                this._accumulator -= deltaMillis;
                if (this._delayTimer < this._delay) {
                    this._delayTimer += deltaMillis;
                }
                else {
                    var done = false;
                    if (this._firstUpdate) {
                        this._firstUpdate = false;
                        this._addParticle();
                    }
                    if (this.durationTimer < this.duration) {
                        this.durationTimer += deltaMillis;
                    }
                    else {
                        if (!this.continuous || this._allowCompletion) {
                            done = true;
                        }
                        else {
                            this._restart();
                        }
                    }
                    if (!done) {
                        this._emissionDelta += deltaMillis;
                        var emissionTime = this._emission +
                            this._emissionDiff * this._emissionValue.getScale(this.durationTimer / this.duration);
                        if (emissionTime > 0) {
                            emissionTime = 1000 / emissionTime;
                            if (this._emissionDelta >= emissionTime) {
                                var emitCount = this._emissionDelta / emissionTime;
                                emitCount = ~~Math.min(emitCount, this._maxParticleCount - this._activeCount);
                                this._emissionDelta -= emitCount * emissionTime;
                                this._emissionDelta %= emissionTime;
                                this._addParticles(emitCount);
                            }
                        }
                        if (this._activeCount < this._minParticleCount) {
                            this._addParticles(this._minParticleCount - this._activeCount);
                        }
                    }
                }
                var active = this._active;
                var activeCount = this._activeCount;
                var particles = this._particles;
                for (var i = 0, n = active.length; i < n; i++) {
                    if (active[i] && !this._updateParticle(particles[i], delta, deltaMillis)) {
                        active[i] = false;
                        this._deactivateParticle(particles[i]);
                        activeCount--;
                    }
                }
                this._activeCount = activeCount;
            };
            ParticleEmitter.prototype.setTextures = function (sprites) {
                var _this = this;
                this.sprites = sprites;
                if (sprites.length === 0)
                    return;
                this._particles.forEach(function (particle) {
                    if (particle === null)
                        return;
                    var sprite = null;
                    switch (_this._spriteMode) {
                        case pixiparticles.constants.SpriteMode.single:
                            sprite = sprites[0];
                            break;
                        case pixiparticles.constants.SpriteMode.random:
                            sprite = pixiparticles.utils.sample(sprites);
                            break;
                        case pixiparticles.constants.SpriteMode.animated:
                            var percent = 1 - particle.currentLife / particle.life;
                            particle.frame = Math.min(percent * sprites.length, sprites.length - 1);
                            sprite = sprites[particle.frame];
                            break;
                    }
                    particle.texture = sprite;
                });
            };
            ParticleEmitter.prototype.setSpriteMode = function (spriteMode) {
                this._spriteMode = spriteMode;
            };
            ParticleEmitter.prototype.preAllocateParticles = function () {
                var _this = this;
                if (this.sprites.length === 0)
                    throw new Error('ParticleEmitter.setSprites() must have been called before preAllocateParticles()');
                this._particles.forEach(function (particle, index) {
                    if (particle === null) {
                        _this._particles[index] = particle = _this._newParticle(_this.sprites[0]);
                        particle.flip.x = _this._flipX;
                        particle.flip.y = _this._flipY;
                    }
                });
            };
            ParticleEmitter.prototype.allowCompletion = function () {
                this._allowCompletion = true;
                this.durationTimer = this.duration;
            };
            ParticleEmitter.prototype.start = function () {
                this._firstUpdate = true;
                this._allowCompletion = false;
                this._restart();
            };
            ParticleEmitter.prototype.reset = function () {
                this._emissionDelta = 0;
                this.durationTimer = this.duration;
                var active = this._active;
                for (var i = 0, n = active.length; i < n; i++)
                    active[i] = false;
                this._activeCount = 0;
                this.start();
            };
            ParticleEmitter.prototype.isComplete = function () {
                if (this.continuous && !this._allowCompletion)
                    return false;
                if (this._delayTimer < this._delay)
                    return false;
                return this.durationTimer >= this.duration && this._activeCount == 0;
            };
            ParticleEmitter.prototype.getPercentComplete = function () {
                if (this._delayTimer < this._delay)
                    return 0;
                return Math.min(1, this.durationTimer / this.duration);
            };
            ParticleEmitter.prototype._newParticle = function (sprite) {
                return new core.Particle(this._additive, sprite);
            };
            ParticleEmitter.prototype._setMaxParticleCount = function (maxParticleCount) {
                var _this = this;
                this._maxParticleCount = maxParticleCount;
                this._active = Array.apply(void 0, Array(maxParticleCount)).map(function () { return false; });
                this._activeCount = 0;
                this._particles = Array.apply(void 0, Array(maxParticleCount)).map(function () { return new core.Particle(_this._additive); });
            };
            ParticleEmitter.prototype._setMinParticleCount = function (minParticleCount) {
                this._minParticleCount = minParticleCount;
            };
            ParticleEmitter.prototype._addParticle = function () {
                var activeCount = this._activeCount;
                if (activeCount === this._maxParticleCount)
                    return;
                var active = this._active;
                for (var i = 0, n = active.length; i < n; i++) {
                    if (!active[i]) {
                        this._activateParticle(i);
                        active[i] = true;
                        this._activeCount = activeCount + 1;
                        break;
                    }
                }
            };
            ParticleEmitter.prototype._addParticles = function (count) {
                count = Math.min(count, this._maxParticleCount - this._activeCount);
                if (count == 0)
                    return;
                var active = this._active;
                var index = 0;
                var n = active.length;
                outer: for (var i = 0; i < count; i++) {
                    for (; index < n; index++) {
                        if (!active[index]) {
                            this._activateParticle(index);
                            active[index++] = true;
                            continue outer;
                        }
                    }
                    break;
                }
                this._activeCount += count;
            };
            ParticleEmitter.prototype._restart = function () {
                this._delay = this._delayValue.active ? this._delayValue.newLowValue : 0;
                this._delayTimer = 0;
                this.durationTimer -= this.duration;
                this.duration = this._durationValue.newLowValue;
                this._emission = this._emissionValue.newLowValue;
                this._emissionDiff = this._emissionValue.newHighValue;
                if (!this._emissionValue.relative)
                    this._emissionDiff -= this._emission;
                if (!this._lifeValue.independent)
                    this._generateLifeValues();
                if (!this._lifeOffsetValue.independent)
                    this._generateLifeOffsetValues();
                this._spawnWidth = this._spawnWidthValue.newLowValue;
                this._spawnWidthDiff = this._spawnWidthValue.newHighValue;
                if (!this._spawnWidthValue.relative)
                    this._spawnWidthDiff -= this._spawnWidth;
                this._spawnHeight = this._spawnHeightValue.newLowValue;
                this._spawnHeightDiff = this._spawnHeightValue.newHighValue;
                if (!this._spawnHeightValue.relative)
                    this._spawnHeightDiff -= this._spawnHeight;
                this._updateFlags = 0;
                if (this._angleValue.active && this._angleValue.timeline.length > 1)
                    this._updateFlags |= UpdateFlags.angle;
                if (this._velocityValue.active)
                    this._updateFlags |= UpdateFlags.velocity;
                if (this._xScaleValue.timeline.length > 1)
                    this._updateFlags |= UpdateFlags.scale;
                if (this._yScaleValue.active && this._yScaleValue.timeline.length > 1)
                    this._updateFlags |= UpdateFlags.scale;
                if (this._rotationValue.active && this._rotationValue.timeline.length > 1)
                    this._updateFlags |= UpdateFlags.rotation;
                if (this._windValue.active)
                    this._updateFlags |= UpdateFlags.wind;
                if (this._gravityValue.active)
                    this._updateFlags |= UpdateFlags.gravity;
                if (this._tintValue.timeline.length > 1)
                    this._updateFlags |= UpdateFlags.tint;
                if (this._spriteMode == pixiparticles.constants.SpriteMode.animated)
                    this._updateFlags |= UpdateFlags.sprite;
            };
            ParticleEmitter.prototype._initialize = function () {
                this.sprites = [];
                this._durationValue.alwaysActive = true;
                this._emissionValue.alwaysActive = true;
                this._lifeValue.alwaysActive = true;
                this._xScaleValue.alwaysActive = true;
                this._transparencyValue.alwaysActive = true;
                this._spawnShapeValue.alwaysActive = true;
                this._spawnWidthValue.alwaysActive = true;
                this._spawnHeightValue.alwaysActive = true;
            };
            ParticleEmitter.prototype._activateParticle = function (index) {
                var sprite = null;
                switch (this._spriteMode) {
                    case pixiparticles.constants.SpriteMode.single:
                    case pixiparticles.constants.SpriteMode.animated:
                        sprite = this.sprites[0];
                        break;
                    case pixiparticles.constants.SpriteMode.random:
                        sprite = pixiparticles.utils.sample(this.sprites);
                        break;
                }
                var particle = this._particles[index];
                if (particle === null) {
                    this._particles[index] = particle = this._newParticle(sprite);
                    particle.flip.x = this._flipX;
                    particle.flip.y = this._flipY;
                }
                else {
                    particle.reset();
                    particle.texture = sprite;
                }
                var percent = this.durationTimer / this.duration;
                var updateFlags = this._updateFlags;
                if (this._lifeValue.independent)
                    this._generateLifeValues();
                if (this._lifeOffsetValue.independent)
                    this._generateLifeOffsetValues();
                particle.currentLife = particle.life = this._life + this._lifeDiff * this._lifeValue.getScale(percent);
                if (this._velocityValue.active) {
                    particle.velocity = this._velocityValue.newLowValue;
                    particle.velocityDiff = this._velocityValue.newHighValue;
                    if (!this._velocityValue.relative)
                        particle.velocityDiff -= particle.velocity;
                }
                particle.angle = this._angleValue.newLowValue;
                particle.angleDiff = this._angleValue.newHighValue;
                if (!this._angleValue.relative)
                    particle.angleDiff -= particle.angle;
                var angle = 0;
                if ((updateFlags & UpdateFlags.angle) === 0) {
                    angle = particle.angle + particle.angleDiff * this._angleValue.getScale(0);
                    particle.angle = angle;
                    particle.angleCos = Math.cos(PIXI.DEG_TO_RAD * angle);
                    particle.angleSin = Math.sin(PIXI.DEG_TO_RAD * angle);
                }
                var spriteWidth = sprite.width;
                var spriteHeight = sprite.height;
                particle.xScale = this._xScaleValue.newLowValue / spriteWidth;
                particle.xScaleDiff = this._xScaleValue.newHighValue / spriteWidth;
                if (!this._xScaleValue.relative)
                    particle.xScaleDiff -= particle.xScale;
                if (this._yScaleValue.active) {
                    particle.yScale = this._yScaleValue.newLowValue / spriteHeight;
                    particle.yScaleDiff = this._yScaleValue.newHighValue / spriteHeight;
                    if (!this._yScaleValue.relative)
                        particle.yScaleDiff -= particle.yScale;
                    particle.scale.set(particle.xScale + particle.xScaleDiff * this._xScaleValue.getScale(0), particle.yScale + particle.yScaleDiff * this._yScaleValue.getScale(0));
                }
                else {
                    particle.scale.set(particle.xScale + particle.xScaleDiff * this._xScaleValue.getScale(0));
                }
                if (this._rotationValue.active) {
                    particle.rotation = this._rotationValue.newLowValue;
                    particle.rotationDiff = this._rotationValue.newHighValue;
                    if (!this._rotationValue.relative)
                        particle.rotationDiff -= particle.rotation;
                    var rotation = particle.rotation + particle.rotationDiff * this._rotationValue.getScale(0);
                    if (this._aligned)
                        rotation += angle;
                    particle.rotation = rotation;
                }
                if (this._windValue.active) {
                    particle.wind = this._windValue.newLowValue;
                    particle.windDiff = this._windValue.newHighValue;
                    if (!this._windValue.relative)
                        particle.windDiff -= particle.wind;
                }
                if (this._gravityValue.active) {
                    particle.gravity = this._gravityValue.newLowValue;
                    particle.gravityDiff = this._gravityValue.newHighValue;
                    if (!this._gravityValue.relative)
                        particle.gravityDiff -= particle.gravity;
                }
                var color = particle.tint;
                if (color == null)
                    particle.tint = color = [0, 0, 0];
                var temp = this._tintValue.getColor(0);
                color[0] = temp[0];
                color[1] = temp[1];
                color[2] = temp[2];
                particle.transparency = this._transparencyValue.newLowValue;
                particle.transparencyDiff = this._transparencyValue.newHighValue - particle.transparency;
                var x = this._x;
                if (this._xOffsetValue.active)
                    x += this._xOffsetValue.newLowValue;
                var y = this._y;
                if (this._yOffsetValue.active)
                    y += this._yOffsetValue.newLowValue;
                switch (this._spawnShapeValue.shape) {
                    case pixiparticles.constants.SpawnShape.square: {
                        var width = this._spawnWidth + this._spawnWidthDiff * this._spawnWidthValue.getScale(percent);
                        var height = this._spawnHeight + this._spawnHeightDiff * this._spawnHeightValue.getScale(percent);
                        x += pixiparticles.utils.between(0, width) - width / 2;
                        y += pixiparticles.utils.between(0, height) - height / 2;
                        break;
                    }
                    case pixiparticles.constants.SpawnShape.ellipse: {
                        var width = this._spawnWidth + this._spawnWidthDiff * this._spawnWidthValue.getScale(percent);
                        var height = this._spawnHeight + this._spawnHeightDiff * this._spawnHeightValue.getScale(percent);
                        var radiusX = width / 2;
                        var radiusY = height / 2;
                        if (radiusX === 0 || radiusY === 0)
                            break;
                        var scaleY = radiusX / radiusY;
                        if (this._spawnShapeValue.edges) {
                            var spawnAngle = void 0;
                            switch (this._spawnShapeValue.side) {
                                case pixiparticles.constants.SpawnEllipseSide.top:
                                    spawnAngle = pixiparticles.utils.between(0, 179);
                                    break;
                                case pixiparticles.constants.SpawnEllipseSide.bottom:
                                    spawnAngle = pixiparticles.utils.between(0, 179);
                                    break;
                                default:
                                    spawnAngle = pixiparticles.utils.between(0, 360);
                                    break;
                            }
                            var cosDeg = Math.cos(PIXI.DEG_TO_RAD * angle);
                            var sinDeg = Math.sin(PIXI.DEG_TO_RAD * angle);
                            x += cosDeg * radiusX;
                            y += (sinDeg * radiusX) / scaleY;
                            if ((updateFlags & UpdateFlags.angle) === 0) {
                                particle.angle = spawnAngle;
                                particle.angleCos = cosDeg;
                                particle.angleSin = sinDeg;
                            }
                        }
                        else {
                            var radius2 = radiusX * radiusX;
                            while (true) {
                                var px = pixiparticles.utils.between(0, width) - radiusX;
                                var py = pixiparticles.utils.between(0, width) - radiusX;
                                if (px * px + py * py <= radius2) {
                                    x += px;
                                    y += py / scaleY;
                                    break;
                                }
                            }
                        }
                        break;
                    }
                    case pixiparticles.constants.SpawnShape.line: {
                        var width = this._spawnWidth + this._spawnWidthDiff * this._spawnWidthValue.getScale(percent);
                        var height = this._spawnHeight + this._spawnHeightDiff * this._spawnHeightValue.getScale(percent);
                        if (width != 0) {
                            var lineX = width * Math.random();
                            x += lineX;
                            y += lineX * (height / width);
                        }
                        else
                            y += height * Math.random();
                        break;
                    }
                }
                particle.positionOffset.set(x, y);
                var offsetTime = this._lifeOffset + this._lifeOffsetDiff * this._lifeOffsetValue.getScale(percent);
                if (offsetTime > 0) {
                    if (offsetTime >= particle.currentLife)
                        offsetTime = particle.currentLife - 1;
                    this._updateParticle(particle, offsetTime, offsetTime);
                }
                this._container.addChild(particle.sprite);
            };
            ParticleEmitter.prototype._deactivateParticle = function (particle) {
                this._container.removeChild(particle.sprite);
            };
            ParticleEmitter.prototype._updateParticle = function (particle, delta, deltaMillis) {
                var life = particle.currentLife - deltaMillis;
                if (life <= 0)
                    return false;
                particle.currentLife = life;
                var percent = 1 - particle.currentLife / particle.life;
                var updateFlags = this._updateFlags;
                if ((updateFlags & UpdateFlags.scale) !== 0) {
                    if (this._yScaleValue.active) {
                        particle.scale.set(particle.xScale + particle.xScaleDiff * this._xScaleValue.getScale(percent), particle.yScale + particle.yScaleDiff * this._yScaleValue.getScale(percent));
                    }
                    else {
                        particle.scale.set(particle.xScale + particle.xScaleDiff * this._xScaleValue.getScale(percent));
                    }
                }
                if ((updateFlags & UpdateFlags.velocity) !== 0) {
                    var velocity = (particle.velocity + particle.velocityDiff * this._velocityValue.getScale(percent)) * delta;
                    var velocityX = 0, velocityY = 0;
                    if ((updateFlags & UpdateFlags.angle) !== 0) {
                        var angle = particle.angle + particle.angleDiff * this._angleValue.getScale(percent);
                        velocityX = velocity * Math.cos(PIXI.DEG_TO_RAD * angle);
                        velocityY = velocity * Math.sin(PIXI.DEG_TO_RAD * angle);
                        if ((updateFlags & UpdateFlags.rotation) !== 0) {
                            var rotation = particle.rotationDiff * this._rotationValue.getScale(percent);
                            if (this._aligned)
                                rotation -= angle;
                            particle.rotation = rotation;
                        }
                    }
                    else {
                        velocityX = velocity * particle.angleCos;
                        velocityY = velocity * particle.angleSin;
                        if (this._aligned || (updateFlags & UpdateFlags.rotation) !== 0) {
                            var rotation = particle.rotationDiff * this._rotationValue.getScale(percent);
                            if (this._aligned)
                                rotation -= particle.angle;
                            particle.rotation = rotation;
                        }
                    }
                    if ((updateFlags & UpdateFlags.wind) !== 0) {
                        velocityX += (particle.wind + particle.windDiff * this._windValue.getScale(percent)) * delta;
                    }
                    if ((updateFlags & UpdateFlags.gravity) !== 0) {
                        velocityY +=
                            (particle.gravity + particle.gravityDiff * this._gravityValue.getScale(percent)) * delta;
                    }
                    particle.position.x += velocityX;
                    particle.position.y -= velocityY;
                }
                else {
                    if ((updateFlags & UpdateFlags.rotation) !== 0)
                        particle.rotation = particle.rotationDiff * this._rotationValue.getScale(percent);
                }
                var color;
                if ((updateFlags & UpdateFlags.tint) !== 0)
                    color = this._tintValue.getColor(percent);
                else
                    color = particle.tint;
                particle.color = [
                    color[0],
                    color[1],
                    color[2],
                    particle.transparency + particle.transparencyDiff * this._transparencyValue.getScale(percent),
                ];
                if ((updateFlags & UpdateFlags.sprite) !== 0) {
                    var frame = Math.min(percent * this.sprites.length, this.sprites.length - 1);
                    if (particle.frame !== frame) {
                        var sprite = this.sprites[frame];
                        particle.texture = sprite;
                    }
                }
                particle.update();
                return true;
            };
            ParticleEmitter.prototype._generateLifeValues = function () {
                this._life = this._lifeValue.newLowValue;
                this._lifeDiff = this._lifeValue.newHighValue;
                if (!this._lifeValue.relative)
                    this._lifeDiff -= this._life;
            };
            ParticleEmitter.prototype._generateLifeOffsetValues = function () {
                this._lifeOffset = this._lifeOffsetValue.active ? this._lifeOffsetValue.newLowValue : 0;
                this._lifeOffsetDiff = this._lifeOffsetValue.newHighValue;
                if (!this._lifeOffsetValue.relative)
                    this._lifeOffsetDiff -= this._lifeOffset;
            };
            return ParticleEmitter;
        }());
        core.ParticleEmitter = ParticleEmitter;
    })(core = pixiparticles.core || (pixiparticles.core = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    PIXI.particles = pixiparticles;
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var constants;
    (function (constants) {
        var SpawnEllipseSide;
        (function (SpawnEllipseSide) {
            SpawnEllipseSide[SpawnEllipseSide["both"] = 0] = "both";
            SpawnEllipseSide[SpawnEllipseSide["top"] = 1] = "top";
            SpawnEllipseSide[SpawnEllipseSide["bottom"] = 2] = "bottom";
        })(SpawnEllipseSide = constants.SpawnEllipseSide || (constants.SpawnEllipseSide = {}));
    })(constants = pixiparticles.constants || (pixiparticles.constants = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var constants;
    (function (constants) {
        var SpawnShape;
        (function (SpawnShape) {
            SpawnShape[SpawnShape["point"] = 0] = "point";
            SpawnShape[SpawnShape["line"] = 1] = "line";
            SpawnShape[SpawnShape["square"] = 2] = "square";
            SpawnShape[SpawnShape["ellipse"] = 3] = "ellipse";
        })(SpawnShape = constants.SpawnShape || (constants.SpawnShape = {}));
    })(constants = pixiparticles.constants || (pixiparticles.constants = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var constants;
    (function (constants) {
        var SpriteMode;
        (function (SpriteMode) {
            SpriteMode[SpriteMode["single"] = 0] = "single";
            SpriteMode[SpriteMode["random"] = 1] = "random";
            SpriteMode[SpriteMode["animated"] = 2] = "animated";
        })(SpriteMode = constants.SpriteMode || (constants.SpriteMode = {}));
    })(constants = pixiparticles.constants || (pixiparticles.constants = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var utils;
    (function (utils) {
        utils.between = function (min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min);
        };
    })(utils = pixiparticles.utils || (pixiparticles.utils = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var utils;
    (function (utils) {
        utils.isNullOrUndefined = function (obj) {
            return typeof obj === 'undefined' || obj === null;
        };
    })(utils = pixiparticles.utils || (pixiparticles.utils = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var utils;
    (function (utils) {
        utils.sample = function (array) {
            return array[utils.between(0, array.length - 1)];
        };
    })(utils = pixiparticles.utils || (pixiparticles.utils = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var values;
    (function (values) {
        var Value = (function () {
            function Value() {
            }
            Value.prototype.init = function (value) {
                if (!this.alwaysActive) {
                    this.active = value.active;
                }
                else {
                    this.active = true;
                }
            };
            return Value;
        }());
        values.Value = Value;
    })(values = pixiparticles.values || (pixiparticles.values = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var values;
    (function (values) {
        var GradientColorValue = (function (_super) {
            __extends(GradientColorValue, _super);
            function GradientColorValue() {
                var _this = _super.call(this) || this;
                _this.colors = [1, 1, 1];
                _this.timeline = [0];
                _this.alwaysActive = true;
                return _this;
            }
            GradientColorValue.prototype.getColor = function (percent) {
                var startIndex = 0;
                var endIndex = -1;
                var timeline = this.timeline;
                var n = timeline.length;
                for (var i = 1; i < n; i++) {
                    var t = timeline[i];
                    if (t > percent) {
                        endIndex = i;
                        break;
                    }
                    startIndex = i;
                }
                var startTime = timeline[startIndex];
                startIndex *= 3;
                var r1 = this.colors[startIndex];
                var g1 = this.colors[startIndex + 1];
                var b1 = this.colors[startIndex + 2];
                if (endIndex == -1) {
                    GradientColorValue._temp[0] = r1;
                    GradientColorValue._temp[1] = g1;
                    GradientColorValue._temp[2] = b1;
                    return GradientColorValue._temp;
                }
                var factor = (percent - startTime) / (timeline[endIndex] - startTime);
                endIndex *= 3;
                GradientColorValue._temp[0] = r1 + (this.colors[endIndex] - r1) * factor;
                GradientColorValue._temp[1] = g1 + (this.colors[endIndex + 1] - g1) * factor;
                GradientColorValue._temp[2] = b1 + (this.colors[endIndex + 2] - b1) * factor;
                return GradientColorValue._temp;
            };
            GradientColorValue.prototype.init = function (value) {
                _super.prototype.init.call(this, value);
                if (!this.active)
                    return;
                var colorsCount = value.colorsCount;
                for (var i = 0; i < colorsCount; i++)
                    this.colors[i] = value['colors' + i];
                var timelineCount = value.timelineCount;
                for (var i = 0; i < timelineCount; i++)
                    this.timeline[i] = value['timeline' + i];
            };
            GradientColorValue._temp = [0, 0, 0, 0];
            return GradientColorValue;
        }(values.Value));
        values.GradientColorValue = GradientColorValue;
    })(values = pixiparticles.values || (pixiparticles.values = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var values;
    (function (values) {
        var RangedNumericValue = (function (_super) {
            __extends(RangedNumericValue, _super);
            function RangedNumericValue() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            Object.defineProperty(RangedNumericValue.prototype, "newLowValue", {
                get: function () {
                    return this.lowMin + (this.lowMax - this.lowMin) * Math.random();
                },
                enumerable: false,
                configurable: true
            });
            RangedNumericValue.prototype.setLow = function (min, max) {
                this.lowMin = min;
                this.lowMax = pixiparticles.utils.isNullOrUndefined(max) ? min : max;
            };
            RangedNumericValue.prototype.scale = function (scale) {
                this.lowMin *= scale;
                this.lowMax *= scale;
            };
            RangedNumericValue.prototype.init = function (value) {
                _super.prototype.init.call(this, value);
                this.lowMin = value.lowMin;
                this.lowMax = value.lowMax;
            };
            return RangedNumericValue;
        }(values.Value));
        values.RangedNumericValue = RangedNumericValue;
    })(values = pixiparticles.values || (pixiparticles.values = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var values;
    (function (values) {
        var ScaledNumericValue = (function (_super) {
            __extends(ScaledNumericValue, _super);
            function ScaledNumericValue() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.scaling = [1];
                _this.timeline = [0];
                return _this;
            }
            Object.defineProperty(ScaledNumericValue.prototype, "newHighValue", {
                get: function () {
                    return this.highMin + (this.highMax - this.highMin) * Math.random();
                },
                enumerable: false,
                configurable: true
            });
            ScaledNumericValue.prototype.setHigh = function (min, max) {
                this.highMin = min;
                this.highMax = pixiparticles.utils.isNullOrUndefined(max) ? min : max;
            };
            ScaledNumericValue.prototype.scale = function (scale) {
                _super.prototype.scale.call(this, scale);
                this.highMin *= scale;
                this.highMax *= scale;
            };
            ScaledNumericValue.prototype.getScaling = function () {
                return this.scaling;
            };
            ScaledNumericValue.prototype.getScale = function (percent) {
                var endIndex = -1;
                var timeline = this.timeline;
                var n = timeline.length;
                for (var i = 1; i < n; i++) {
                    var t = timeline[i];
                    if (t > percent) {
                        endIndex = i;
                        break;
                    }
                }
                if (endIndex == -1)
                    return this.scaling[n - 1];
                var scaling = this.scaling;
                var startIndex = endIndex - 1;
                var startValue = scaling[startIndex];
                var startTime = timeline[startIndex];
                return (startValue +
                    (scaling[endIndex] - startValue) * ((percent - startTime) / (timeline[endIndex] - startTime)));
            };
            ScaledNumericValue.prototype.init = function (value) {
                _super.prototype.init.call(this, value);
                if (!this.active)
                    return;
                this.highMin = value.highMin;
                this.highMax = value.highMax;
                this.relative = value.relative;
                var scalingCount = value.scalingCount;
                this.scaling = [];
                for (var i = 0; i < scalingCount; i++)
                    this.scaling.push(value['scaling' + i]);
                var timelineCount = value.timelineCount;
                this.timeline = [];
                for (var i = 0; i < timelineCount; i++)
                    this.timeline.push(value['timeline' + i]);
            };
            return ScaledNumericValue;
        }(values.RangedNumericValue));
        values.ScaledNumericValue = ScaledNumericValue;
    })(values = pixiparticles.values || (pixiparticles.values = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var values;
    (function (values) {
        var IndependentScaledNumericValue = (function (_super) {
            __extends(IndependentScaledNumericValue, _super);
            function IndependentScaledNumericValue() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            IndependentScaledNumericValue.prototype.init = function (value) {
                _super.prototype.init.call(this, value);
                this.independent = value.independent;
            };
            return IndependentScaledNumericValue;
        }(values.ScaledNumericValue));
        values.IndependentScaledNumericValue = IndependentScaledNumericValue;
    })(values = pixiparticles.values || (pixiparticles.values = {}));
})(pixiparticles || (pixiparticles = {}));
var pixiparticles;
(function (pixiparticles) {
    var values;
    (function (values) {
        var SpawnShapeValue = (function (_super) {
            __extends(SpawnShapeValue, _super);
            function SpawnShapeValue() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.shape = pixiparticles.constants.SpawnShape.point;
                _this.side = pixiparticles.constants.SpawnEllipseSide.both;
                return _this;
            }
            SpawnShapeValue.prototype.init = function (value) {
                _super.prototype.init.call(this, value);
                if (!this.active)
                    return;
                this.shape = value.shape;
                if (this.shape === pixiparticles.constants.SpawnShape.ellipse) {
                    this.edges = value.edges;
                    this.side = value.side;
                }
            };
            return SpawnShapeValue;
        }(values.Value));
        values.SpawnShapeValue = SpawnShapeValue;
    })(values = pixiparticles.values || (pixiparticles.values = {}));
})(pixiparticles || (pixiparticles = {}));
//# sourceMappingURL=pixi-particles.js.map