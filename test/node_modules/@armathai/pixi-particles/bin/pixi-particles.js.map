{"version":3,"file":"pixi-particles.js","sourceRoot":"","sources":["../src/Particle.ts","../src/ParticleEffect.ts","../src/ParticleEffectConfig.ts","../src/ParticleEmitter.ts","../src/ParticleEmitterConfig.ts","../src/exporter.ts","../src/constants/SpawnEllipseSide.ts","../src/constants/SpawnShape.ts","../src/constants/SpriteMode.ts","../src/utils/between.ts","../src/utils/isNullOrUndefined.ts","../src/utils/sample.ts","../src/values/Value.ts","../src/values/GradientColorValue.ts","../src/values/RangedNumericValue.ts","../src/values/ScaledNumericValue.ts","../src/values/IndependentScaledNumericValue.ts","../src/values/SpawnShapeValue.ts"],"names":[],"mappings":"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","sourcesContent":["namespace pixiparticles.core {\n    export class Particle {\n        public life: number;\n        public currentLife: number;\n        public xScale: number;\n        public xScaleDiff: number;\n        public yScale: number;\n        public yScaleDiff: number;\n        public rotation = 0;\n        public rotationDiff: number;\n        public velocity: number;\n        public velocityDiff: number;\n        public angle: number;\n        public angleDiff: number;\n        public angleCos: number;\n        public angleSin: number;\n        public transparency: number;\n        public transparencyDiff: number;\n        public wind: number;\n        public windDiff: number;\n        public gravity: number;\n        public gravityDiff: number;\n        public tint: number[];\n        public color: number[];\n        public frame: number;\n\n        //\n\n        public position = new PIXI.Point(0, 0);\n        public positionOffset = new PIXI.Point(0, 0);\n        public flip: { x: boolean; y: boolean };\n        public scale = new PIXI.Point(0, 0);\n        public texture: PIXI.Texture;\n        private _sprite: PIXI.Sprite;\n\n        public constructor(additive: boolean, texture?: PIXI.Texture) {\n            this._sprite = new PIXI.Sprite(texture);\n            this._sprite.anchor.set(0.5);\n            this._sprite.blendMode = additive ? PIXI.BLEND_MODES.ADD : PIXI.BLEND_MODES.NORMAL;\n        }\n\n        public get sprite(): PIXI.Sprite {\n            return this._sprite;\n        }\n\n        public reset(): void {\n            this.position.set(0, 0);\n            this.scale.set(1, 1);\n            this.texture = null;\n        }\n\n        public update(): void {\n            this._sprite.texture = this.texture;\n            this._sprite.tint = PIXI.utils.rgb2hex(this.color);\n            this._sprite.alpha = this.color[3];\n            this.scale.copyTo(this._sprite.scale);\n            this._sprite.position.x = this.position.x + this.positionOffset.x;\n            this._sprite.position.y = this.position.y + this.positionOffset.y;\n            this._sprite.angle = this.rotation;\n        }\n    }\n}\n","namespace pixiparticles.core {\n    export class ParticleEffect extends PIXI.Container {\n        private readonly _emitters: ParticleEmitter[];\n\n        public constructor(config: ParticleEffectConfig) {\n            super();\n            this._emitters = [];\n            Object.keys(config).forEach((e) => {\n                const emitter = this.newEmitter(e, config[e]);\n                this._emitters.push(emitter);\n            });\n        }\n\n        public start(): void {\n            this._emitters.forEach((e) => e.start());\n        }\n\n        /** Resets the effect so it can be started again like a new effect. */\n        public reset(): void {\n            this._emitters.forEach((e) => e.reset());\n        }\n\n        public update(delta: number): void {\n            this._emitters.forEach((e) => e.update(delta));\n        }\n\n        public allowCompletion(): void {\n            this._emitters.forEach((e) => e.allowCompletion());\n        }\n\n        public isComplete(): boolean {\n            return !this._emitters.find((e) => !e.isComplete());\n        }\n\n        public setDuration(duration: number): void {\n            this._emitters.forEach((e) => {\n                e.continuous = false;\n                e.duration = duration;\n                e.durationTimer = 0;\n            });\n        }\n\n        public getEmitters(): ParticleEmitter[] {\n            return this._emitters;\n        }\n\n        /** Returns the emitter with the specified name, or null. */\n        public findEmitter(name: string): ParticleEmitter {\n            return this._emitters.find((e) => e.name === name);\n        }\n\n        /** Allocates all emitters particles. */\n        public preAllocateParticles(): void {\n            this._emitters.forEach((e) => e.preAllocateParticles());\n        }\n\n        /** Disposes the texture for each sprite for each ParticleEmitter. */\n        public destroy(\n            options: { children?: boolean; texture?: boolean; baseTexture?: boolean } = { children: true },\n        ): void {\n            super.destroy(options);\n        }\n\n        protected newEmitter(name: string, emitterConfig: ParticleEmitterConfig): ParticleEmitter {\n            return new ParticleEmitter(this, name, emitterConfig);\n        }\n    }\n}\n","/// <reference types=\"pixi.js\" />\n\nnamespace pixiparticles.core {\n    export type ParticleEffectConfig = { [key: string]: ParticleEmitterConfig };\n}\n","/// <reference types=\"pixi.js\" />\n\nnamespace pixiparticles.core {\n    enum UpdateFlags {\n        scale = 1 << 0,\n        angle = 1 << 1,\n        rotation = 1 << 2,\n        velocity = 1 << 3,\n        wind = 1 << 4,\n        gravity = 1 << 5,\n        tint = 1 << 6,\n        sprite = 1 << 7,\n    }\n\n    export class ParticleEmitter {\n        public duration = 1;\n        public durationTimer = 0;\n        public sprites: PIXI.Texture[];\n        public continuous = false;\n        public name: string;\n\n        private _delayValue = new values.RangedNumericValue();\n        private _lifeOffsetValue = new values.IndependentScaledNumericValue();\n        private _durationValue = new values.RangedNumericValue();\n        private _lifeValue = new values.IndependentScaledNumericValue();\n        private _emissionValue = new values.ScaledNumericValue();\n        private _xScaleValue = new values.ScaledNumericValue();\n        private _yScaleValue = new values.ScaledNumericValue();\n        private _rotationValue = new values.ScaledNumericValue();\n        private _velocityValue = new values.ScaledNumericValue();\n        private _angleValue = new values.ScaledNumericValue();\n        private _windValue = new values.ScaledNumericValue();\n        private _gravityValue = new values.ScaledNumericValue();\n        private _transparencyValue = new values.ScaledNumericValue();\n        private _tintValue = new values.GradientColorValue();\n        private _xOffsetValue = new values.ScaledNumericValue();\n        private _yOffsetValue = new values.ScaledNumericValue();\n        private _spawnWidthValue = new values.ScaledNumericValue();\n        private _spawnHeightValue = new values.ScaledNumericValue();\n        private _spawnShapeValue = new values.SpawnShapeValue();\n\n        private _xSizeValues: values.RangedNumericValue[];\n        private _ySizeValues: values.RangedNumericValue[];\n        private _motionValues: values.RangedNumericValue[];\n\n        private _accumulator = 0;\n        private _spriteMode: constants.SpriteMode = constants.SpriteMode.single;\n        private _particles: Particle[];\n        private _minParticleCount = 0;\n        private _maxParticleCount = 4;\n        private _x = 0;\n        private _y = 0;\n        private _container: PIXI.Container;\n        private _activeCount = 0;\n        private _active: boolean[];\n        private _firstUpdate = false;\n        private _flipX = false;\n        private _flipY = false;\n        private _updateFlags = 0;\n        private _allowCompletion = false;\n\n        private _emission = 0;\n        private _emissionDiff = 0;\n        private _emissionDelta = 0;\n        private _lifeOffset = 0;\n        private _lifeOffsetDiff = 0;\n        private _life = 0;\n        private _lifeDiff = 0;\n        private _spawnWidth = 0;\n        private _spawnWidthDiff = 0;\n        private _spawnHeight = 0;\n        private _spawnHeightDiff = 0;\n        private _delay = 0;\n        private _delayTimer = 0;\n\n        private _attached = false;\n        private _aligned = false;\n        private _additive = true;\n\n        public constructor(container: PIXI.Container, name: string, emitterConfig: ParticleEmitterConfig) {\n            this._initialize();\n            this._container = container;\n            this.name = name;\n            const { options } = emitterConfig;\n            this._attached = options.attached;\n            this.continuous = options.continuous;\n            this._aligned = options.aligned;\n            this._additive = options.additive;\n            this._spriteMode = options.spriteMode;\n            this._delayValue.init(emitterConfig.delay);\n            this._durationValue.init(emitterConfig.duration);\n            const { count } = emitterConfig;\n            this._setMaxParticleCount(count.max);\n            this._setMinParticleCount(count.min);\n            this._emissionValue.init(emitterConfig.emission);\n            this._lifeValue.init(emitterConfig.life);\n            this._lifeOffsetValue.init(emitterConfig.life.offset);\n            this._xOffsetValue.init(emitterConfig.offset.x);\n            this._yOffsetValue.init(emitterConfig.offset.y);\n            this._spawnShapeValue.init(emitterConfig.spawn);\n            this._spawnWidthValue.init(emitterConfig.spawn.width);\n            this._spawnHeightValue.init(emitterConfig.spawn.height);\n            this._xScaleValue.init(emitterConfig.scale.x);\n            this._yScaleValue.init(emitterConfig.scale.y);\n            this._velocityValue.init(emitterConfig.velocity);\n            this._angleValue.init(emitterConfig.angle);\n            this._rotationValue.init(emitterConfig.rotation);\n            this._windValue.init(emitterConfig.wind);\n            this._gravityValue.init(emitterConfig.gravity);\n            this._tintValue.init(emitterConfig.tint);\n            this._transparencyValue.init(emitterConfig.transparency);\n            const { textures } = emitterConfig;\n            this.setTextures(textures.map((t) => PIXI.Texture.from(t)));\n        }\n\n        public update(delta: number): void {\n            this._accumulator += delta;\n            if (this._accumulator < 1) return;\n            const deltaMillis = this._accumulator;\n            this._accumulator -= deltaMillis;\n\n            if (this._delayTimer < this._delay) {\n                this._delayTimer += deltaMillis;\n            } else {\n                let done = false;\n                if (this._firstUpdate) {\n                    this._firstUpdate = false;\n                    this._addParticle();\n                }\n                if (this.durationTimer < this.duration) {\n                    this.durationTimer += deltaMillis;\n                } else {\n                    if (!this.continuous || this._allowCompletion) {\n                        done = true;\n                    } else {\n                        this._restart();\n                    }\n                }\n                if (!done) {\n                    this._emissionDelta += deltaMillis;\n                    let emissionTime =\n                        this._emission +\n                        this._emissionDiff * this._emissionValue.getScale(this.durationTimer / this.duration);\n                    if (emissionTime > 0) {\n                        emissionTime = 1000 / emissionTime;\n                        if (this._emissionDelta >= emissionTime) {\n                            let emitCount = this._emissionDelta / emissionTime;\n                            emitCount = ~~Math.min(emitCount, this._maxParticleCount - this._activeCount);\n                            this._emissionDelta -= emitCount * emissionTime;\n                            this._emissionDelta %= emissionTime;\n                            this._addParticles(emitCount);\n                        }\n                    }\n                    if (this._activeCount < this._minParticleCount) {\n                        this._addParticles(this._minParticleCount - this._activeCount);\n                    }\n                }\n            }\n\n            const active = this._active;\n            let activeCount = this._activeCount;\n            const particles = this._particles;\n            for (let i = 0, n = active.length; i < n; i++) {\n                if (active[i] && !this._updateParticle(particles[i], delta, deltaMillis)) {\n                    active[i] = false;\n                    this._deactivateParticle(particles[i]);\n                    activeCount--;\n                }\n            }\n            this._activeCount = activeCount;\n        }\n\n        public setTextures(sprites: PIXI.Texture[]): void {\n            this.sprites = sprites;\n            if (sprites.length === 0) return;\n            this._particles.forEach((particle) => {\n                if (particle === null) return;\n                let sprite = null;\n                switch (this._spriteMode) {\n                    case constants.SpriteMode.single:\n                        sprite = sprites[0];\n                        break;\n                    case constants.SpriteMode.random:\n                        sprite = utils.sample(sprites);\n                        break;\n                    case constants.SpriteMode.animated:\n                        const percent = 1 - particle.currentLife / particle.life;\n                        particle.frame = Math.min(percent * sprites.length, sprites.length - 1);\n                        sprite = sprites[particle.frame];\n                        break;\n                }\n                particle.texture = sprite;\n            });\n        }\n\n        public setSpriteMode(spriteMode: constants.SpriteMode): void {\n            this._spriteMode = spriteMode;\n        }\n\n        /**\n         * Allocates max particles emitter can hold. Usually called early on to avoid allocation on updates.\n         */\n        public preAllocateParticles(): void {\n            if (this.sprites.length === 0)\n                throw new Error('ParticleEmitter.setSprites() must have been called before preAllocateParticles()');\n            this._particles.forEach((particle, index) => {\n                if (particle === null) {\n                    this._particles[index] = particle = this._newParticle(this.sprites[0]);\n                    particle.flip.x = this._flipX;\n                    particle.flip.y = this._flipY;\n                }\n            });\n        }\n\n        public allowCompletion(): void {\n            this._allowCompletion = true;\n            this.durationTimer = this.duration;\n        }\n\n        public start(): void {\n            this._firstUpdate = true;\n            this._allowCompletion = false;\n            this._restart();\n        }\n\n        public reset(): void {\n            this._emissionDelta = 0;\n            this.durationTimer = this.duration;\n            const active = this._active;\n            for (let i = 0, n = active.length; i < n; i++) active[i] = false;\n            this._activeCount = 0;\n            this.start();\n        }\n\n        public isComplete(): boolean {\n            if (this.continuous && !this._allowCompletion) return false;\n            if (this._delayTimer < this._delay) return false;\n            return this.durationTimer >= this.duration && this._activeCount == 0;\n        }\n\n        public getPercentComplete(): number {\n            if (this._delayTimer < this._delay) return 0;\n            return Math.min(1, this.durationTimer / this.duration);\n        }\n\n        private _newParticle(sprite: PIXI.Texture): Particle {\n            return new Particle(this._additive, sprite);\n        }\n\n        private _setMaxParticleCount(maxParticleCount: number): void {\n            this._maxParticleCount = maxParticleCount;\n            this._active = Array(...Array(maxParticleCount)).map(() => false);\n            this._activeCount = 0;\n            this._particles = Array(...Array(maxParticleCount)).map(() => new Particle(this._additive));\n        }\n\n        private _setMinParticleCount(minParticleCount: number): void {\n            this._minParticleCount = minParticleCount;\n        }\n\n        private _addParticle(): void {\n            const activeCount = this._activeCount;\n            if (activeCount === this._maxParticleCount) return;\n            const active = this._active;\n            for (let i = 0, n = active.length; i < n; i++) {\n                if (!active[i]) {\n                    this._activateParticle(i);\n                    active[i] = true;\n                    this._activeCount = activeCount + 1;\n                    break;\n                }\n            }\n        }\n\n        private _addParticles(count: number): void {\n            count = Math.min(count, this._maxParticleCount - this._activeCount);\n            if (count == 0) return;\n            const active = this._active;\n            let index = 0;\n            const n = active.length;\n            outer: for (let i = 0; i < count; i++) {\n                for (; index < n; index++) {\n                    if (!active[index]) {\n                        this._activateParticle(index);\n                        active[index++] = true;\n                        continue outer;\n                    }\n                }\n                break;\n            }\n            this._activeCount += count;\n        }\n\n        private _restart(): void {\n            this._delay = this._delayValue.active ? this._delayValue.newLowValue : 0;\n            this._delayTimer = 0;\n\n            this.durationTimer -= this.duration;\n            this.duration = this._durationValue.newLowValue;\n\n            this._emission = this._emissionValue.newLowValue;\n            this._emissionDiff = this._emissionValue.newHighValue;\n            if (!this._emissionValue.relative) this._emissionDiff -= this._emission;\n\n            if (!this._lifeValue.independent) this._generateLifeValues();\n\n            if (!this._lifeOffsetValue.independent) this._generateLifeOffsetValues();\n\n            this._spawnWidth = this._spawnWidthValue.newLowValue;\n            this._spawnWidthDiff = this._spawnWidthValue.newHighValue;\n            if (!this._spawnWidthValue.relative) this._spawnWidthDiff -= this._spawnWidth;\n\n            this._spawnHeight = this._spawnHeightValue.newLowValue;\n            this._spawnHeightDiff = this._spawnHeightValue.newHighValue;\n            if (!this._spawnHeightValue.relative) this._spawnHeightDiff -= this._spawnHeight;\n\n            this._updateFlags = 0;\n            if (this._angleValue.active && this._angleValue.timeline.length > 1) this._updateFlags |= UpdateFlags.angle;\n            if (this._velocityValue.active) this._updateFlags |= UpdateFlags.velocity;\n            if (this._xScaleValue.timeline.length > 1) this._updateFlags |= UpdateFlags.scale;\n            if (this._yScaleValue.active && this._yScaleValue.timeline.length > 1)\n                this._updateFlags |= UpdateFlags.scale;\n            if (this._rotationValue.active && this._rotationValue.timeline.length > 1)\n                this._updateFlags |= UpdateFlags.rotation;\n            if (this._windValue.active) this._updateFlags |= UpdateFlags.wind;\n            if (this._gravityValue.active) this._updateFlags |= UpdateFlags.gravity;\n            if (this._tintValue.timeline.length > 1) this._updateFlags |= UpdateFlags.tint;\n            if (this._spriteMode == constants.SpriteMode.animated) this._updateFlags |= UpdateFlags.sprite;\n        }\n\n        private _initialize(): void {\n            this.sprites = [];\n            this._durationValue.alwaysActive = true;\n            this._emissionValue.alwaysActive = true;\n            this._lifeValue.alwaysActive = true;\n            this._xScaleValue.alwaysActive = true;\n            this._transparencyValue.alwaysActive = true;\n            this._spawnShapeValue.alwaysActive = true;\n            this._spawnWidthValue.alwaysActive = true;\n            this._spawnHeightValue.alwaysActive = true;\n        }\n\n        private _activateParticle(index: number): void {\n            let sprite: PIXI.Texture = null;\n            switch (this._spriteMode) {\n                case constants.SpriteMode.single:\n                case constants.SpriteMode.animated:\n                    sprite = this.sprites[0];\n                    break;\n                case constants.SpriteMode.random:\n                    sprite = utils.sample(this.sprites);\n                    break;\n            }\n\n            let particle = this._particles[index];\n            if (particle === null) {\n                this._particles[index] = particle = this._newParticle(sprite);\n                particle.flip.x = this._flipX;\n                particle.flip.y = this._flipY;\n            } else {\n                particle.reset();\n                particle.texture = sprite;\n            }\n\n            const percent = this.durationTimer / this.duration;\n            const updateFlags = this._updateFlags;\n\n            if (this._lifeValue.independent) this._generateLifeValues();\n\n            if (this._lifeOffsetValue.independent) this._generateLifeOffsetValues();\n\n            particle.currentLife = particle.life = this._life + this._lifeDiff * this._lifeValue.getScale(percent);\n\n            if (this._velocityValue.active) {\n                particle.velocity = this._velocityValue.newLowValue;\n                particle.velocityDiff = this._velocityValue.newHighValue;\n                if (!this._velocityValue.relative) particle.velocityDiff -= particle.velocity;\n            }\n\n            particle.angle = this._angleValue.newLowValue;\n            particle.angleDiff = this._angleValue.newHighValue;\n            if (!this._angleValue.relative) particle.angleDiff -= particle.angle;\n            let angle = 0;\n            if ((updateFlags & UpdateFlags.angle) === 0) {\n                angle = particle.angle + particle.angleDiff * this._angleValue.getScale(0);\n                particle.angle = angle;\n                particle.angleCos = Math.cos(PIXI.DEG_TO_RAD * angle);\n                particle.angleSin = Math.sin(PIXI.DEG_TO_RAD * angle);\n            }\n\n            const spriteWidth = sprite.width;\n            const spriteHeight = sprite.height;\n\n            particle.xScale = this._xScaleValue.newLowValue / spriteWidth;\n            particle.xScaleDiff = this._xScaleValue.newHighValue / spriteWidth;\n            if (!this._xScaleValue.relative) particle.xScaleDiff -= particle.xScale;\n\n            if (this._yScaleValue.active) {\n                particle.yScale = this._yScaleValue.newLowValue / spriteHeight;\n                particle.yScaleDiff = this._yScaleValue.newHighValue / spriteHeight;\n                if (!this._yScaleValue.relative) particle.yScaleDiff -= particle.yScale;\n                particle.scale.set(\n                    particle.xScale + particle.xScaleDiff * this._xScaleValue.getScale(0),\n                    particle.yScale + particle.yScaleDiff * this._yScaleValue.getScale(0),\n                );\n            } else {\n                particle.scale.set(particle.xScale + particle.xScaleDiff * this._xScaleValue.getScale(0));\n            }\n\n            if (this._rotationValue.active) {\n                particle.rotation = this._rotationValue.newLowValue;\n                particle.rotationDiff = this._rotationValue.newHighValue;\n                if (!this._rotationValue.relative) particle.rotationDiff -= particle.rotation;\n                let rotation = particle.rotation + particle.rotationDiff * this._rotationValue.getScale(0);\n                if (this._aligned) rotation += angle;\n                particle.rotation = rotation;\n            }\n\n            if (this._windValue.active) {\n                particle.wind = this._windValue.newLowValue;\n                particle.windDiff = this._windValue.newHighValue;\n                if (!this._windValue.relative) particle.windDiff -= particle.wind;\n            }\n\n            if (this._gravityValue.active) {\n                particle.gravity = this._gravityValue.newLowValue;\n                particle.gravityDiff = this._gravityValue.newHighValue;\n                if (!this._gravityValue.relative) particle.gravityDiff -= particle.gravity;\n            }\n\n            let color = particle.tint;\n            if (color == null) particle.tint = color = [0, 0, 0];\n            const temp = this._tintValue.getColor(0);\n            color[0] = temp[0];\n            color[1] = temp[1];\n            color[2] = temp[2];\n\n            particle.transparency = this._transparencyValue.newLowValue;\n            particle.transparencyDiff = this._transparencyValue.newHighValue - particle.transparency;\n\n            // Spawn.\n            let x = this._x;\n            if (this._xOffsetValue.active) x += this._xOffsetValue.newLowValue;\n            let y = this._y;\n            if (this._yOffsetValue.active) y += this._yOffsetValue.newLowValue;\n            switch (this._spawnShapeValue.shape) {\n                case constants.SpawnShape.square: {\n                    const width = this._spawnWidth + this._spawnWidthDiff * this._spawnWidthValue.getScale(percent);\n                    const height = this._spawnHeight + this._spawnHeightDiff * this._spawnHeightValue.getScale(percent);\n                    x += utils.between(0, width) - width / 2;\n                    y += utils.between(0, height) - height / 2;\n                    break;\n                }\n                case constants.SpawnShape.ellipse: {\n                    const width = this._spawnWidth + this._spawnWidthDiff * this._spawnWidthValue.getScale(percent);\n                    const height = this._spawnHeight + this._spawnHeightDiff * this._spawnHeightValue.getScale(percent);\n                    const radiusX = width / 2;\n                    const radiusY = height / 2;\n                    if (radiusX === 0 || radiusY === 0) break;\n                    const scaleY = radiusX / radiusY;\n                    if (this._spawnShapeValue.edges) {\n                        let spawnAngle;\n                        switch (this._spawnShapeValue.side) {\n                            case constants.SpawnEllipseSide.top:\n                                spawnAngle = utils.between(0, 179);\n                                break;\n                            case constants.SpawnEllipseSide.bottom:\n                                spawnAngle = utils.between(0, 179);\n                                break;\n                            default:\n                                spawnAngle = utils.between(0, 360);\n                                break;\n                        }\n                        const cosDeg = Math.cos(PIXI.DEG_TO_RAD * angle);\n                        const sinDeg = Math.sin(PIXI.DEG_TO_RAD * angle);\n                        x += cosDeg * radiusX;\n                        y += (sinDeg * radiusX) / scaleY;\n                        if ((updateFlags & UpdateFlags.angle) === 0) {\n                            particle.angle = spawnAngle;\n                            particle.angleCos = cosDeg;\n                            particle.angleSin = sinDeg;\n                        }\n                    } else {\n                        const radius2 = radiusX * radiusX;\n                        while (true) {\n                            const px = utils.between(0, width) - radiusX;\n                            const py = utils.between(0, width) - radiusX;\n                            if (px * px + py * py <= radius2) {\n                                x += px;\n                                y += py / scaleY;\n                                break;\n                            }\n                        }\n                    }\n                    break;\n                }\n                case constants.SpawnShape.line: {\n                    const width = this._spawnWidth + this._spawnWidthDiff * this._spawnWidthValue.getScale(percent);\n                    const height = this._spawnHeight + this._spawnHeightDiff * this._spawnHeightValue.getScale(percent);\n                    if (width != 0) {\n                        const lineX = width * Math.random();\n                        x += lineX;\n                        y += lineX * (height / width);\n                    } else y += height * Math.random();\n                    break;\n                }\n            }\n            particle.positionOffset.set(x, y);\n\n            let offsetTime = this._lifeOffset + this._lifeOffsetDiff * this._lifeOffsetValue.getScale(percent);\n            if (offsetTime > 0) {\n                if (offsetTime >= particle.currentLife) offsetTime = particle.currentLife - 1;\n                this._updateParticle(particle, offsetTime, offsetTime);\n            }\n\n            this._container.addChild(particle.sprite);\n        }\n\n        private _deactivateParticle(particle: Particle): void {\n            this._container.removeChild(particle.sprite);\n        }\n\n        private _updateParticle(particle: Particle, delta: number, deltaMillis: number): boolean {\n            const life = particle.currentLife - deltaMillis;\n            if (life <= 0) return false;\n            particle.currentLife = life;\n\n            const percent = 1 - particle.currentLife / particle.life;\n            const updateFlags = this._updateFlags;\n\n            if ((updateFlags & UpdateFlags.scale) !== 0) {\n                if (this._yScaleValue.active) {\n                    particle.scale.set(\n                        particle.xScale + particle.xScaleDiff * this._xScaleValue.getScale(percent),\n                        particle.yScale + particle.yScaleDiff * this._yScaleValue.getScale(percent),\n                    );\n                } else {\n                    particle.scale.set(particle.xScale + particle.xScaleDiff * this._xScaleValue.getScale(percent));\n                }\n            }\n\n            if ((updateFlags & UpdateFlags.velocity) !== 0) {\n                const velocity =\n                    (particle.velocity + particle.velocityDiff * this._velocityValue.getScale(percent)) * delta;\n                let velocityX = 0,\n                    velocityY = 0;\n                if ((updateFlags & UpdateFlags.angle) !== 0) {\n                    const angle = particle.angle + particle.angleDiff * this._angleValue.getScale(percent);\n                    velocityX = velocity * Math.cos(PIXI.DEG_TO_RAD * angle);\n                    velocityY = velocity * Math.sin(PIXI.DEG_TO_RAD * angle);\n                    if ((updateFlags & UpdateFlags.rotation) !== 0) {\n                        let rotation = particle.rotationDiff * this._rotationValue.getScale(percent);\n                        if (this._aligned) rotation -= angle;\n                        particle.rotation = rotation;\n                    }\n                    // console.log(velocityX, velocityY);\n                } else {\n                    velocityX = velocity * particle.angleCos;\n                    velocityY = velocity * particle.angleSin;\n                    if (this._aligned || (updateFlags & UpdateFlags.rotation) !== 0) {\n                        let rotation = particle.rotationDiff * this._rotationValue.getScale(percent);\n                        if (this._aligned) rotation -= particle.angle;\n                        particle.rotation = rotation;\n                    }\n                }\n\n                if ((updateFlags & UpdateFlags.wind) !== 0) {\n                    velocityX += (particle.wind + particle.windDiff * this._windValue.getScale(percent)) * delta;\n                }\n\n                if ((updateFlags & UpdateFlags.gravity) !== 0) {\n                    velocityY +=\n                        (particle.gravity + particle.gravityDiff * this._gravityValue.getScale(percent)) * delta;\n                }\n                particle.position.x += velocityX;\n                particle.position.y -= velocityY;\n            } else {\n                if ((updateFlags & UpdateFlags.rotation) !== 0)\n                    particle.rotation = particle.rotationDiff * this._rotationValue.getScale(percent);\n            }\n\n            let color;\n            if ((updateFlags & UpdateFlags.tint) !== 0) color = this._tintValue.getColor(percent);\n            else color = particle.tint;\n\n            particle.color = [\n                color[0],\n                color[1],\n                color[2],\n                particle.transparency + particle.transparencyDiff * this._transparencyValue.getScale(percent),\n            ];\n\n            if ((updateFlags & UpdateFlags.sprite) !== 0) {\n                const frame = Math.min(percent * this.sprites.length, this.sprites.length - 1);\n                if (particle.frame !== frame) {\n                    const sprite = this.sprites[frame];\n                    particle.texture = sprite;\n                }\n            }\n            particle.update();\n            return true;\n        }\n\n        private _generateLifeValues(): void {\n            this._life = this._lifeValue.newLowValue;\n            this._lifeDiff = this._lifeValue.newHighValue;\n            if (!this._lifeValue.relative) this._lifeDiff -= this._life;\n        }\n\n        private _generateLifeOffsetValues(): void {\n            this._lifeOffset = this._lifeOffsetValue.active ? this._lifeOffsetValue.newLowValue : 0;\n            this._lifeOffsetDiff = this._lifeOffsetValue.newHighValue;\n            if (!this._lifeOffsetValue.relative) this._lifeOffsetDiff -= this._lifeOffset;\n        }\n    }\n}\n","/// <reference types=\"pixi.js\" />\n\nnamespace pixiparticles.core {\n    export type ParticleEmitterConfig = {\n        delay: values.RangedNumericValueType;\n        duration: values.RangedNumericValueType;\n        count: { min: number; max: number };\n        emission: values.ScaledNumericValueType;\n        life: values.IndependentScaledNumericValueType & {\n            offset: values.IndependentScaledNumericValueType;\n        };\n        offset: {\n            x: values.ScaledNumericValueType;\n            y: values.ScaledNumericValueType;\n        };\n        spawn: values.SpawnShapeValueType & {\n            width: values.ScaledNumericValueType;\n            height: values.ScaledNumericValueType;\n        };\n        scale: {\n            x: values.ScaledNumericValueType;\n            y: values.ScaledNumericValueType;\n        };\n        velocity: values.ScaledNumericValueType;\n        angle: values.ScaledNumericValueType;\n        rotation: values.ScaledNumericValueType;\n        wind: values.ScaledNumericValueType;\n        gravity: values.ScaledNumericValueType;\n        tint: values.GradientColorValueType;\n        transparency: values.ScaledNumericValueType;\n        options: {\n            attached: boolean;\n            continuous: boolean;\n            aligned: boolean;\n            additive: boolean;\n            behind: boolean;\n            premultipliedAlpha: boolean;\n            spriteMode: constants.SpriteMode;\n        };\n        textures: string[];\n    };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nnamespace pixiparticles {\n    (PIXI as any).particles = pixiparticles;\n}\n","namespace pixiparticles.constants {\n    export enum SpawnEllipseSide {\n        both,\n        top,\n        bottom,\n    }\n}\n","namespace pixiparticles.constants {\n    export enum SpawnShape {\n        point,\n        line,\n        square,\n        ellipse,\n    }\n}\n","namespace pixiparticles.constants {\n    export enum SpriteMode {\n        single,\n        random,\n        animated,\n    }\n}\n","namespace pixiparticles.utils {\n    export const between = (min: number, max: number): number => {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    };\n}\n","namespace pixiparticles.utils {\n    export const isNullOrUndefined = <T>(obj: T | null | undefined): obj is null | undefined => {\n        return typeof obj === 'undefined' || obj === null;\n    };\n}\n","namespace pixiparticles.utils {\n    export const sample = <T>(array: T[]): T => {\n        return array[between(0, array.length - 1)];\n    };\n}\n","namespace pixiparticles.values {\n    export type ValueType = {\n        active?: boolean;\n        alwaysActive?: boolean;\n    };\n\n    export class Value {\n        public active: boolean;\n        public alwaysActive: boolean;\n\n        public init(value: ValueType): void {\n            if (!this.alwaysActive) {\n                this.active = value.active;\n            } else {\n                this.active = true;\n            }\n        }\n    }\n}\n","/// <reference path=\"./Value.ts\" />\n\nnamespace pixiparticles.values {\n    export type GradientColorValueType = ValueType & {\n        colorsCount: number;\n        timelineCount: number;\n    };\n\n    export class GradientColorValue extends Value {\n        private static _temp: number[] = [0, 0, 0, 0];\n\n        public colors: number[] = [1, 1, 1];\n        public timeline: number[] = [0];\n\n        public constructor() {\n            super();\n            this.alwaysActive = true;\n        }\n\n        public getColor(percent: number): number[] {\n            let startIndex = 0;\n            let endIndex = -1;\n            const timeline = this.timeline;\n            const n = timeline.length;\n            for (let i = 1; i < n; i++) {\n                const t = timeline[i];\n                if (t > percent) {\n                    endIndex = i;\n                    break;\n                }\n                startIndex = i;\n            }\n            const startTime = timeline[startIndex];\n            startIndex *= 3;\n            const r1 = this.colors[startIndex];\n            const g1 = this.colors[startIndex + 1];\n            const b1 = this.colors[startIndex + 2];\n            if (endIndex == -1) {\n                GradientColorValue._temp[0] = r1;\n                GradientColorValue._temp[1] = g1;\n                GradientColorValue._temp[2] = b1;\n                return GradientColorValue._temp;\n            }\n            const factor = (percent - startTime) / (timeline[endIndex] - startTime);\n            endIndex *= 3;\n            GradientColorValue._temp[0] = r1 + (this.colors[endIndex] - r1) * factor;\n            GradientColorValue._temp[1] = g1 + (this.colors[endIndex + 1] - g1) * factor;\n            GradientColorValue._temp[2] = b1 + (this.colors[endIndex + 2] - b1) * factor;\n            return GradientColorValue._temp;\n        }\n\n        public init(value: GradientColorValueType): void {\n            super.init(value);\n            if (!this.active) return;\n            const colorsCount = value.colorsCount;\n            for (let i = 0; i < colorsCount; i++) this.colors[i] = value['colors' + i];\n            const timelineCount = value.timelineCount;\n            for (let i = 0; i < timelineCount; i++) this.timeline[i] = value['timeline' + i];\n        }\n    }\n}\n","namespace pixiparticles.values {\n    export type RangedNumericValueType = ValueType & {\n        lowMin?: number;\n        lowMax?: number;\n    };\n\n    export class RangedNumericValue extends Value {\n        public lowMin: number;\n        public lowMax: number;\n\n        public get newLowValue(): number {\n            return this.lowMin + (this.lowMax - this.lowMin) * Math.random();\n        }\n\n        public setLow(min: number, max?: number): void {\n            this.lowMin = min;\n            this.lowMax = utils.isNullOrUndefined(max) ? min : max;\n        }\n\n        /** permanently scales the range by a scalar. */\n        public scale(scale: number): void {\n            this.lowMin *= scale;\n            this.lowMax *= scale;\n        }\n\n        public init(value: RangedNumericValueType): void {\n            super.init(value);\n            this.lowMin = value.lowMin;\n            this.lowMax = value.lowMax;\n        }\n    }\n}\n","/// <reference path=\"./RangedNumericValue.ts\" />\n\nnamespace pixiparticles.values {\n    export type ScaledNumericValueType = RangedNumericValueType & {\n        highMin?: number;\n        highMax?: number;\n        relative?: boolean;\n        scalingCount?: number;\n        timelineCount?: number;\n    };\n\n    export class ScaledNumericValue extends RangedNumericValue {\n        public scaling: number[] = [1];\n        public timeline: number[] = [0];\n        public highMin: number;\n        public highMax: number;\n        public relative: boolean;\n\n        public get newHighValue(): number {\n            return this.highMin + (this.highMax - this.highMin) * Math.random();\n        }\n\n        public setHigh(min: number, max?: number): void {\n            this.highMin = min;\n            this.highMax = utils.isNullOrUndefined(max) ? min : max;\n        }\n\n        public scale(scale: number): void {\n            super.scale(scale);\n            this.highMin *= scale;\n            this.highMax *= scale;\n        }\n\n        public getScaling(): number[] {\n            return this.scaling;\n        }\n\n        public getScale(percent: number): number {\n            let endIndex = -1;\n            const timeline = this.timeline;\n            const n = timeline.length;\n            for (let i = 1; i < n; i++) {\n                const t = timeline[i];\n                if (t > percent) {\n                    endIndex = i;\n                    break;\n                }\n            }\n            if (endIndex == -1) return this.scaling[n - 1];\n            const scaling = this.scaling;\n            const startIndex = endIndex - 1;\n            const startValue = scaling[startIndex];\n            const startTime = timeline[startIndex];\n            return (\n                startValue +\n                (scaling[endIndex] - startValue) * ((percent - startTime) / (timeline[endIndex] - startTime))\n            );\n        }\n\n        public init(value: ScaledNumericValueType): void {\n            super.init(value);\n            if (!this.active) return;\n            this.highMin = value.highMin;\n            this.highMax = value.highMax;\n            this.relative = value.relative;\n            const scalingCount = value.scalingCount;\n            this.scaling = [];\n            for (let i = 0; i < scalingCount; i++) this.scaling.push(value['scaling' + i]);\n            const timelineCount = value.timelineCount;\n            this.timeline = [];\n            for (let i = 0; i < timelineCount; i++) this.timeline.push(value['timeline' + i]);\n        }\n    }\n}\n","/// <reference path=\"./ScaledNumericValue.ts\" />\n\nnamespace pixiparticles.values {\n    export type IndependentScaledNumericValueType = ScaledNumericValueType & {\n        independent: boolean;\n    };\n\n    export class IndependentScaledNumericValue extends ScaledNumericValue {\n        public independent: boolean;\n\n        public init(value: IndependentScaledNumericValueType): void {\n            super.init(value);\n            this.independent = value.independent;\n        }\n    }\n}\n","/// <reference path=\"./Value.ts\" />\n\nnamespace pixiparticles.values {\n    export type SpawnShapeValueType = ValueType & {\n        shape: constants.SpawnShape;\n        edges?: boolean;\n        side?: constants.SpawnEllipseSide;\n    };\n\n    export class SpawnShapeValue extends Value {\n        public shape: constants.SpawnShape = constants.SpawnShape.point;\n        public edges: boolean;\n        public side: constants.SpawnEllipseSide = constants.SpawnEllipseSide.both;\n\n        public init(value: SpawnShapeValueType): void {\n            super.init(value);\n            if (!this.active) return;\n            this.shape = value.shape;\n            if (this.shape === constants.SpawnShape.ellipse) {\n                this.edges = value.edges;\n                this.side = value.side;\n            }\n        }\n    }\n}\n"]}