"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cancelAnimationFrame = exports.requestAnimationFrame = exports.pnow = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

/**
 * Thanks for following contributor of codes
 * https://gist.github.com/1866474
 * http://paulirish.com/2011/requestanimationframe-for-smart-animating/
 * http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
 * https://github.com/Financial-Times/polyfill-library/blob/master/polyfills/requestAnimationFrame/polyfill.js
**/
var uId = 1;

var uniqueId = function uniqueId() {
  return uId++;
}; // We use `self` instead of `window` for `WebWorker` support.


var root = (typeof self === "undefined" ? "undefined" : (0, _typeof2.default)(self)) === 'object' && self.self == self ? self : (typeof global === "undefined" ? "undefined" : (0, _typeof2.default)(global)) === 'object' && global.global == global ? global : {};
var nowOffset = Date.now(); // use performance api if exist, otherwise use Date.now.
// Date.now polyfill required.

var pnow = function pnow() {
  if (root.performance && typeof root.performance.now === 'function') {
    return root.performance.now();
  } // fallback


  return Date.now() - nowOffset;
};

exports.pnow = pnow;
var reservedCBs = {};
var lastTime = Date.now();

var polyfillRaf = function polyfillRaf(callback) {
  if (typeof callback !== 'function') {
    throw new TypeError(callback + ' is not a function');
  }

  var currentTime = Date.now();
  var gap = currentTime - lastTime;
  var delay = gap > 16 ? 0 : 16 - gap;
  var id = Number(uniqueId());
  reservedCBs[id] = callback; // keys(reservedCBs).length > 1 의미는 이미 setTimeout 이 걸려있는 경우.
  // 함께 callback 이 실행될 수 있게 reservedCBs 에만 추가해주고 return

  if (Object.keys(reservedCBs).length > 1) return id;
  setTimeout(function () {
    lastTime = currentTime;
    var copied = reservedCBs;
    reservedCBs = {};
    Object.keys(copied).forEach(function (key) {
      return copied[key](pnow());
    });
  }, delay);
  return id;
};

var polyfillCaf = function polyfillCaf(id) {
  delete reservedCBs[id];
};

var vpArr = ['', 'webkit', 'moz', 'ms', 'o'];

var getRequestAnimationFrame = function getRequestAnimationFrame(vp) {
  if (typeof vp !== 'string') return polyfillRaf;
  if (vp === '') return root['requestAnimationFrame'];
  return root[vp + 'RequestAnimationFrame'];
};

var getCancelAnimationFrame = function getCancelAnimationFrame(vp) {
  if (typeof vp !== 'string') return polyfillCaf;
  if (vp === '') return root['cancelAnimationFrame'];
  return root[vp + 'CancelAnimationFrame'] || root[vp + 'CancelRequestAnimationFrame'];
};

var find = function find(arr, predicate) {
  var i = 0;

  while (arr[i] !== void 0) {
    if (predicate(arr[i])) return arr[i];
    i = i + 1;
  }
};

var vp = find(vpArr, function (vp) {
  return !!getRequestAnimationFrame(vp);
});
var requestAnimationFrame = getRequestAnimationFrame(vp);
exports.requestAnimationFrame = requestAnimationFrame;
var cancelAnimationFrame = getCancelAnimationFrame(vp); // Browser export as a global
// https://github.com/JayPuff/seven-tween/blob/master/src/seven-tween.js

exports.cancelAnimationFrame = cancelAnimationFrame;

if (typeof window !== 'undefined') {
  root.requestAnimationFrame = requestAnimationFrame;
  root.cancelAnimationFrame = cancelAnimationFrame;
} // Node Export


if (typeof module !== "undefined" && module.exports) {
  module.exports = {
    requestAnimationFrame: requestAnimationFrame,
    cancelAnimationFrame: cancelAnimationFrame,
    pnow: pnow
  };
}

